{
  "version": 3,
  "sources": ["../../nanotar/dist/index.mjs"],
  "sourcesContent": ["const TAR_TYPE_FILE = 0;\nconst TAR_TYPE_DIR = 5;\nfunction parseTar(data, opts) {\n  const buffer = data.buffer || data;\n  const files = [];\n  let offset = 0;\n  while (offset < buffer.byteLength - 512) {\n    const name = _readString(buffer, offset, 100);\n    if (name.length === 0) {\n      break;\n    }\n    const mode = _readString(buffer, offset + 100, 8).trim();\n    const uid = Number.parseInt(_readString(buffer, offset + 108, 8));\n    const gid = Number.parseInt(_readString(buffer, offset + 116, 8));\n    const size = _readNumber(buffer, offset + 124, 12);\n    const seek = 512 + 512 * Math.trunc(size / 512) + (size % 512 ? 512 : 0);\n    const mtime = _readNumber(buffer, offset + 136, 12);\n    const _type = _readNumber(buffer, offset + 156, 1);\n    const type = _type === TAR_TYPE_FILE ? \"file\" : _type === TAR_TYPE_DIR ? \"directory\" : _type;\n    const user = _readString(buffer, offset + 265, 32);\n    const group = _readString(buffer, offset + 297, 32);\n    const meta = {\n      name,\n      type,\n      size,\n      attrs: {\n        mode,\n        uid,\n        gid,\n        mtime,\n        user,\n        group\n      }\n    };\n    if (opts?.filter && !opts.filter(meta)) {\n      offset += seek;\n      continue;\n    }\n    if (opts?.metaOnly) {\n      files.push(meta);\n      offset += seek;\n      continue;\n    }\n    const data2 = _type === TAR_TYPE_DIR ? undefined : new Uint8Array(buffer, offset + 512, size);\n    files.push({\n      ...meta,\n      data: data2,\n      get text() {\n        return new TextDecoder().decode(this.data);\n      }\n    });\n    offset += seek;\n  }\n  return files;\n}\nasync function parseTarGzip(data, opts = {}) {\n  const stream = new ReadableStream({\n    start(controller) {\n      controller.enqueue(new Uint8Array(data));\n      controller.close();\n    }\n  }).pipeThrough(new DecompressionStream(opts.compression ?? \"gzip\"));\n  const decompressedData = await new Response(stream).arrayBuffer();\n  return parseTar(decompressedData, opts);\n}\nfunction _readString(buffer, offset, size) {\n  const view = new Uint8Array(buffer, offset, size);\n  const i = view.indexOf(0);\n  const td = new TextDecoder();\n  return td.decode(i === -1 ? view : view.slice(0, i));\n}\nfunction _readNumber(buffer, offset, size) {\n  const view = new Uint8Array(buffer, offset, size);\n  let str = \"\";\n  for (let i = 0; i < size; i++) {\n    str += String.fromCodePoint(view[i]);\n  }\n  return Number.parseInt(str, 8);\n}\n\nfunction createTar(files, opts = {}) {\n  const _files = files.map((file) => {\n    const data = _normalizeData(file.data);\n    return {\n      ...file,\n      data,\n      size: data?.length || 0\n    };\n  });\n  let tarDataSize = 0;\n  for (let i = 0; i < files.length; i++) {\n    const size = _files[i].data?.length ?? 0;\n    tarDataSize += 512 + 512 * Math.trunc(size / 512);\n    if (size % 512) {\n      tarDataSize += 512;\n    }\n  }\n  let bufSize = 10240 * Math.trunc(tarDataSize / 10240);\n  if (tarDataSize % 10240) {\n    bufSize += 10240;\n  }\n  const buffer = new ArrayBuffer(bufSize);\n  let offset = 0;\n  for (const file of _files) {\n    const isDir = !file.data;\n    _writeString(buffer, file.name, offset, 100);\n    const mode = file.attrs?.mode ?? opts.attrs?.mode ?? (isDir ? \"775\" : \"664\");\n    _writeString(buffer, _leftPad(mode, 7), offset + 100, 8);\n    const uid = file.attrs?.uid ?? opts.attrs?.uid ?? 1e3;\n    _writeString(buffer, _leftPad(uid.toString(8), 7), offset + 108, 8);\n    const gid = file.attrs?.gid ?? opts.attrs?.gid ?? 1e3;\n    _writeString(buffer, _leftPad(gid.toString(8), 7), offset + 116, 8);\n    _writeString(buffer, _leftPad(file.size.toString(8), 11), offset + 124, 12);\n    const mtime = file.attrs?.mtime ?? opts.attrs?.mtime ?? Date.now();\n    _writeString(\n      buffer,\n      _leftPad(Math.trunc(mtime / 1e3).toString(8), 11),\n      offset + 136,\n      12\n    );\n    const type = isDir ? \"5\" : \"0\";\n    _writeString(buffer, type, offset + 156, 1);\n    _writeString(\n      buffer,\n      \"ustar\",\n      offset + 257,\n      6\n      /* magic string */\n    );\n    _writeString(\n      buffer,\n      \"00\",\n      offset + 263,\n      2\n      /* magic version */\n    );\n    const user = file.attrs?.user ?? opts.attrs?.user ?? \"\";\n    _writeString(buffer, user, offset + 265, 32);\n    const group = file.attrs?.group ?? opts.attrs?.group ?? \"\";\n    _writeString(buffer, group, offset + 297, 32);\n    _writeString(buffer, \"        \", offset + 148, 8);\n    const header = new Uint8Array(buffer, offset, 512);\n    let chksum = 0;\n    for (let i = 0; i < 512; i++) {\n      chksum += header[i];\n    }\n    _writeString(buffer, chksum.toString(8), offset + 148, 8);\n    if (!isDir) {\n      const destArray = new Uint8Array(buffer, offset + 512, file.size);\n      for (let byteIdx = 0; byteIdx < file.size; byteIdx++) {\n        destArray[byteIdx] = file.data[byteIdx];\n      }\n      offset += 512 * Math.trunc(file.size / 512);\n      if (file.size % 512) {\n        offset += 512;\n      }\n    }\n    offset += 512;\n  }\n  return new Uint8Array(buffer);\n}\nfunction createTarGzipStream(files, opts = {}) {\n  const buffer = createTar(files, opts);\n  return new ReadableStream({\n    start(controller) {\n      controller.enqueue(buffer);\n      controller.close();\n    }\n  }).pipeThrough(new CompressionStream(opts.compression ?? \"gzip\"));\n}\nasync function createTarGzip(files, opts = {}) {\n  const data = await new Response(createTarGzipStream(files, opts)).arrayBuffer().then((buffer) => new Uint8Array(buffer));\n  return data;\n}\nfunction _writeString(buffer, str, offset, size) {\n  const strView = new Uint8Array(buffer, offset, size);\n  const te = new TextEncoder();\n  const written = te.encodeInto(str, strView).written;\n  for (let i = written; i < size; i++) {\n    strView[i] = 0;\n  }\n}\nfunction _leftPad(input, targetLength) {\n  return String(input).padStart(targetLength, \"0\");\n}\nfunction _normalizeData(data) {\n  if (data === null || data === undefined) {\n    return undefined;\n  }\n  if (typeof data === \"string\") {\n    return new TextEncoder().encode(data);\n  }\n  if (data instanceof ArrayBuffer) {\n    return new Uint8Array(data);\n  }\n  return data;\n}\n\nexport { createTar, createTarGzip, createTarGzipStream, parseTar, parseTarGzip };\n"],
  "mappings": "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",
  "names": []
}
